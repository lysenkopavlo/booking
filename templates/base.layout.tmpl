{{define "base"}}
<!doctype html>
<html lang="en">

<head>
	<!-- Required meta tags -->
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

	<title>My awsome page</title>

	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"
		integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
	<link rel="stylesheet"
		href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.3/dist/css/datepicker-bs5.min.css">
	<link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10.15.5/dist/sweetalert2.min.css">
	<link rel="stylesheet" type="text/css" href="/static/css/style/style.css">

</head>



<body>
	<div>
		<!--testing background color-->
		<nav class="navbar bg-dark border-bottom border-bottom-dark" data-bs-theme="dark">
			<!--testing navigation bar content-->
			<nav class="navbar navbar-expand-lg bg-body-tertiary">
				<div class="container-fluid">
					<a class="navbar-brand" href="#">Bad and Breakfast</a>
					<button class="navbar-toggler" type="button" data-bs-toggle="collapse"
						data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent"
						aria-expanded="false" aria-label="Toggle navigation">
						<span class="navbar-toggler-icon"></span>
					</button>
					<div class="collapse navbar-collapse" id="navbarSupportedContent">
						<ul class="navbar-nav me-auto mb-2 mb-lg-0">
							<li class="nav-item">
								<a class="nav-link active" aria-current="page" href="/">Home</a>
							</li>
							<li class="nav-item">
								<a class="nav-link" href="/about">About</a>
							</li>
							<li class="nav-item dropdown">
								<a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown"
									aria-expanded="false">Rooms</a>
								<ul class="dropdown-menu">
									<li><a class="dropdown-item" href="/generals-quarters">General's Quarters</a></li>
									<li><a class="dropdown-item" href="/majors-suite">Major's Suite</a></li>
								</ul>
							</li>
							<li class="nav-item">
								<a class="nav-link" href="/search-availability">Book now</a>
							</li>
							<li class="nav-item">
								<a class="nav-link" href="/contacts">Contacts</a>
							</li>
						</ul>
					</div>
				</div>
			</nav>
		</nav>
	</div>

	<div>
		{{block "content" .}}

		{{end}}
	</div>

	<!-- Testing footer	 -->
	<div class="row my-footer">
		<div class="col">
			Left
		</div>
		<div class="col">
			Center
		</div>
		<div class="col">
			Right
		</div>
	</div>

	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
		integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous">
		</script>

	<script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.3/dist/js/datepicker-full.min.js">
	</script>
	<script src="https://unpkg.com/notie">
	</script>
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11">
	</script>

	<div>
		{{block "js" .}}

		{{end}}
	</div>

	<script>
		let attention = Promt();

		// for date validation form:
		(() => {
			'use strict'
			// Fetch all the forms we want to apply custom Bootstrap validation styles to
			const forms = document.querySelectorAll('needs-validation');
			// Loop over them and prevent submission
			Array.from(forms).forEach(form => {
				form.addEventListener('submit', event => {
					if (!form.checkValidity()) {
						event.preventDefault()
						event.stopPropagation()
					}
					form.classList.add('was-validated')
				}, false);
			});
		})();

		// Don't use anymore since we are using sweet alert 2
		function notify(msg, msgType) {
			notie.alert({
				text: msg,
				type: msgType,
			})
		}
		// Don't use anymore since we are using sweet alert 2
		function notifyModal(title, text, icon, confirmButtonText) {
			Swal.fire({
				title: title,
				html: text,
				icon: icon,
				confirmButtonText: confirmButtonText
			})
		}
		// display an error message if 
		{{with .Error}}
		notify("{{.}}", "error");
		{{end}}
		
		{{with .Flash}}
		notify("{{.}}", "flash");
		{{end}}

		{{with .Warning}}
		notify("{{.}}", "warning");
		{{end}}

		// Promt is a function for making attention messages
		function Promt() {
			let toast = function (c) {
				const {
					msg = "",
					icon = "success",
					position = "top-right",
				} = c;

				const Toast = Swal.mixin({
					toast: true,
					title: msg,
					position: position,
					icon: icon,
					iconColor: 'white',
					customClass: {
						popup: 'colored-toast'
					},
					showConfirmButton: false,
					timer: 1500,
					timerProgressBar: true
				})
				Toast.fire({})
			}
			let success = function (c) {
				const {
					msg = "",
					footer = "",
					title = "",
				} = c;
				Swal.fire({
					icon: "success",
					title: title,
					text: msg,
					footer: footer,
				})
			}
			let error = function (c) {
				const {
					msg = "",
					title = "",
					footer = "",
				} = c;

				Swal.fire({
					icon: "error",
					title: title,
					text: msg,
					footer: footer,
				})
			}
			async function custom(c) {
				const {
					msg = "",
					title = "",
				} = c;

				const { value: result } = await Swal.fire({
					title: title,
					html: msg,
					backdrop: false,
					focusConfirm: false,
					showCancelButton: true,
					willOpen: () => {
						if (c.willOpen !== undefined) {
							c.willOpen();
						}
					},
					didOpen: () => {
						if (c.didOpen !== undefined) {
							c.didOpen();
						}
					},
					preConfirm: () => {
						return [
							document.getElementById('start').value,
							document.getElementById('end').value
						]
					}
				})

				if (result) {
					if (result.dismiss !== Swal.DismissReason.cancel) {
						if (result.value !== "") {
							if (c.callback !== undefined) {
								c.callback(result);
							}
						} else {
							c.callback(false);
						}

					} else {
						c.callback(false);
					}
				}
			}
			return {
				toast: toast,
				success: success,
				error: error,
				custom: custom
			}
		}

	</script>

</body>

</html>
{{end}}